# HIGH SCF ST
con_high_gt = strsplit(high_locus[[paste("conserved.lineages.", high_gt_model, ".gt", sep="")]], split=",")[[1]]
acc_high_gt = strsplit(high_locus[[paste("accel.lineages.", high_gt_model, ".gt", sep="")]], split=",")[[1]]
# HIGH SCF GT
con_low_st = strsplit(low_locus[[paste("conserved.lineages.", low_st_model, ".st" , sep="")]], split=",")[[1]]
nrow(st_results_low)
scf_data = select(aln_stats, locus, node.scf.avg)
names(scf_data)[1] = "original.id"
all_results = merge(st_results, gt_results, by="original.id", suffixes=c(".st", ".gt"))
all_results = merge(all_results, scf_data, by="original.id")
st_results_high = subset(all_results, node.scf.avg > 0.6)
st_results_high = subset(st_results_high, best.fit.model.st == best.fit.model.gt)
st_results_high = subset(st_results_high, best.fit.model.st != "M0" & best.fit.model.gt != "M0")
high_locus = sample_n(st_results_high, 1)
# This randomly selects a locus with high sCF where the best fit models match between
# gene and species tree methods
high_locus = subset(st_results_high, original.id=="chr5-87")
# Select an M1 locus as an example. Other good ones are: chr5-87
high_st_model = tolower(high_locus$best.fit.model.st)
high_gt_model = tolower(high_locus$best.fit.model.gt)
## Selecting locus with high sCF
##########
st_results_low = subset(all_results, node.scf.avg < 0.45)
st_results_low = subset(st_results_low, best.fit.model.st != best.fit.model.gt)
st_results_low = subset(st_results_low, best.fit.model.st != "M0" & best.fit.model.gt != "M0")
#low_locus = sample_n(st_results_low, 1)
# This randomly selects a locus with low sCF where the best fit models don't match between
# gene and species tree methods
low_locus = subset(st_results_low, original.id="chr10-1")
# Select an M1 locus as an example. Other good ones are: chr18-5, chr10-1
low_st_model = tolower(low_locus$best.fit.model.st)
low_gt_model = tolower(low_locus$best.fit.model.gt)
## Selecting locus with LOW sCF
##########
con_high_st = strsplit(high_locus[[paste("conserved.lineages.", high_st_model, ".st" , sep="")]], split=",")[[1]]
acc_high_st = strsplit(high_locus[[paste("accel.lineages.", high_st_model, ".st", sep="")]], split=",")[[1]]
# HIGH SCF ST
con_high_gt = strsplit(high_locus[[paste("conserved.lineages.", high_gt_model, ".gt", sep="")]], split=",")[[1]]
acc_high_gt = strsplit(high_locus[[paste("accel.lineages.", high_gt_model, ".gt", sep="")]], split=",")[[1]]
# HIGH SCF GT
con_low_st = strsplit(low_locus[[paste("conserved.lineages.", low_st_model, ".st" , sep="")]], split=",")[[1]]
scf_data = select(aln_stats, locus, node.scf.avg)
names(scf_data)[1] = "original.id"
all_results = merge(st_results, gt_results, by="original.id", suffixes=c(".st", ".gt"))
all_results = merge(all_results, scf_data, by="original.id")
st_results_high = subset(all_results, node.scf.avg > 0.6)
st_results_high = subset(st_results_high, best.fit.model.st == best.fit.model.gt)
st_results_high = subset(st_results_high, best.fit.model.st != "M0" & best.fit.model.gt != "M0")
high_locus = sample_n(st_results_high, 1)
# This randomly selects a locus with high sCF where the best fit models match between
# gene and species tree methods
high_locus = subset(st_results_high, original.id=="chr5-87")
# Select an M1 locus as an example. Other good ones are: chr5-87
high_st_model = tolower(high_locus$best.fit.model.st)
high_gt_model = tolower(high_locus$best.fit.model.gt)
## Selecting locus with high sCF
##########
st_results_low = subset(all_results, node.scf.avg < 0.45)
st_results_low = subset(st_results_low, best.fit.model.st != best.fit.model.gt)
st_results_low = subset(st_results_low, best.fit.model.st != "M0" & best.fit.model.gt != "M0")
'low_locus = sample_n(st_results_low, 1)
# This randomly selects a locus with low sCF where the best fit models don't match between
scf_data = select(aln_stats, locus, node.scf.avg)
names(scf_data)[1] = "original.id"
all_results = merge(st_results, gt_results, by="original.id", suffixes=c(".st", ".gt"))
all_results = merge(all_results, scf_data, by="original.id")
st_results_high = subset(all_results, node.scf.avg > 0.6)
st_results_high = subset(st_results_high, best.fit.model.st == best.fit.model.gt)
st_results_high = subset(st_results_high, best.fit.model.st != "M0" & best.fit.model.gt != "M0")
high_locus = sample_n(st_results_high, 1)
# This randomly selects a locus with high sCF where the best fit models match between
# gene and species tree methods
high_locus = subset(st_results_high, original.id=="chr5-87")
# Select an M1 locus as an example. Other good ones are: chr5-87
high_st_model = tolower(high_locus$best.fit.model.st)
high_gt_model = tolower(high_locus$best.fit.model.gt)
## Selecting locus with high sCF
##########
st_results_low = subset(all_results, node.scf.avg < 0.45)
st_results_low = subset(st_results_low, best.fit.model.st != best.fit.model.gt)
st_results_low = subset(st_results_low, best.fit.model.st != "M0" & best.fit.model.gt != "M0")
low_locus = sample_n(st_results_low, 1)
# This randomly selects a locus with low sCF where the best fit models don't match between
# gene and species tree methods
#low_locus = subset(st_results_low, original.id="chr10-1")
# Select an M1 locus as an example. Other good ones are: chr18-5, chr10-1
low_st_model = tolower(low_locus$best.fit.model.st)
low_gt_model = tolower(low_locus$best.fit.model.gt)
## Selecting locus with LOW sCF
##########
con_high_st = strsplit(high_locus[[paste("conserved.lineages.", high_st_model, ".st" , sep="")]], split=",")[[1]]
acc_high_st = strsplit(high_locus[[paste("accel.lineages.", high_st_model, ".st", sep="")]], split=",")[[1]]
# HIGH SCF ST
con_high_gt = strsplit(high_locus[[paste("conserved.lineages.", high_gt_model, ".gt", sep="")]], split=",")[[1]]
acc_high_gt = strsplit(high_locus[[paste("accel.lineages.", high_gt_model, ".gt", sep="")]], split=",")[[1]]
# HIGH SCF GT
con_low_st = strsplit(low_locus[[paste("conserved.lineages.", low_st_model, ".st" , sep="")]], split=",")[[1]]
acc_low_st = strsplit(low_locus[[paste("accel.lineages.", low_st_model, ".st" , sep="")]], split=",")[[1]]
# LOW SCF ST
con_low_gt = strsplit(low_locus[[paste("conserved.lineages.", low_gt_model, ".gt", sep="")]], split=",")[[1]]
acc_low_gt = strsplit(low_locus[[paste("accel.lineages.", low_gt_model, ".gt", sep="")]], split=",")[[1]]
# LOW SCF GT
## Split the lineages in each state for both M1 and M2 into vectors
##########
tree_info$high.state.st = "background"
tree_info[tree_info$label %in% acc_high_st,]$high.state.st = "accelerated"
tree_info[tree_info$label %in% con_high_st,]$high.state.st = "conserved"
# HIGH SCF ST
tree_info$high.state.gt = "background"
tree_info[tree_info$label %in% acc_high_gt,]$high.state.gt = "accelerated"
tree_info[tree_info$label %in% con_high_gt,]$high.state.gt = "conserved"
# HIGH SCF GT
tree_info$low.state.st = "background"
tree_info[tree_info$label %in% acc_low_st,]$low.state.st = "accelerated"
tree_info[tree_info$label %in% con_low_st,]$low.state.st = "conserved"
# LOW SCF ST
tree_info$low.state.gt = "background"
tree_info[tree_info$label %in% acc_low_gt,]$low.state.gt = "accelerated"
tree_info[tree_info$label %in% con_low_gt,]$low.state.gt = "conserved"
# LOW SCF GT
# Label each branch in the tree as background, accelerated, or conserved for the best fitting model
##########
tree_info$high.bl.st = tree_info$branch.length
tree_info[tree_info$label %in% con_high_st,]$high.bl.st = tree_info[tree_info$label %in% con_high_st,]$high.bl.st * high_locus[[paste("conserved.rate.", low_st_model, ".st" , sep="")]]
tree_info[tree_info$label %in% acc_high_st,]$high.bl.st = tree_info[tree_info$label %in% acc_high_st,]$high.bl.st * high_locus[[paste("accel.rate.", low_st_model, ".st" , sep="")]]
# HIGH SCF ST
tree_info$high.bl.gt = tree_info$branch.length
tree_info[tree_info$label %in% con_high_gt,]$high.bl.gt = tree_info[tree_info$label %in% con_high_gt,]$high.bl.gt * high_locus[[paste("conserved.rate.", low_st_model, ".gt" , sep="")]]
tree_info[tree_info$label %in% acc_high_gt,]$high.bl.gt = tree_info[tree_info$label %in% acc_high_gt,]$high.bl.gt * high_locus[[paste("accel.rate.", low_st_model, ".gt" , sep="")]]
# HIGH SCF GT
tree_info$low.bl.st = tree_info$branch.length
tree_info[tree_info$label %in% con_low_st,]$low.bl.st = tree_info[tree_info$label %in% con_low_st,]$low.bl.st * low_locus[[paste("conserved.rate.", low_st_model, ".st" , sep="")]]
tree_info[tree_info$label %in% acc_low_st,]$low.bl.st = tree_info[tree_info$label %in% acc_low_st,]$low.bl.st * low_locus[[paste("accel.rate.", low_st_model, ".st" , sep="")]]
# LOW SCF ST
tree_info$low.bl.gt = tree_info$branch.length
tree_info[tree_info$label %in% con_low_gt,]$low.bl.gt = tree_info[tree_info$label %in% con_low_gt,]$low.bl.gt * low_locus[[paste("conserved.rate.", low_st_model, ".gt" , sep="")]]
tree_info[tree_info$label %in% acc_low_gt,]$low.bl.gt = tree_info[tree_info$label %in% acc_low_gt,]$low.bl.gt * low_locus[[paste("accel.rate.", low_st_model, ".gt" , sep="")]]
# LOW SCF GT
# M1 LOCUS:  Adjust branch lengths based on the substitution rates in the best fitting model
##########
high_st_tree = tree
high_gt_tree = tree
low_st_tree = tree
low_gt_tree = tree
for(i in 1:length(tree$edge.length)){
cur_len = tree$edge.length[i]
cur_len = format(round(cur_len, 8), nsmall=8)
# Get the original length for this branch and convert it to a rounded string
if(!tree_info[format(round(tree_info$branch.length,8), nsmall=8)==cur_len,]$high.state.st == "background"){
high_st_tree$edge.length[i] = tree_info[format(round(tree_info$branch.length,8), nsmall=8)==cur_len,]$high.bl.st
}
# HIGH SCF ST
if(!tree_info[format(round(tree_info$branch.length,8), nsmall=8)==cur_len,]$high.state.gt == "background"){
high_gt_tree$edge.length[i] = tree_info[format(round(tree_info$branch.length,8), nsmall=8)==cur_len,]$high.bl.gt
}
# HIGH SCF GT
if(!tree_info[format(round(tree_info$branch.length,8), nsmall=8)==cur_len,]$low.state.st == "background"){
low_st_tree$edge.length[i] = tree_info[format(round(tree_info$branch.length,8), nsmall=8)==cur_len,]$low.bl.st
}
# LOW SCF ST
if(!tree_info[format(round(tree_info$branch.length,8), nsmall=8)==cur_len,]$low.state.gt == "background"){
low_gt_tree$edge.length[i] = tree_info[format(round(tree_info$branch.length,8), nsmall=8)==cur_len,]$low.bl.gt
}
# LOW SCF GT
}
# Loop over every branch in the tree and adjust the branch length based on the state in the model
####################
cols = c("background"="#666666", "conserved"=corecol(numcol=1, pal="wilke", offset=1), "accelerated"=corecol(numcol=1, pal="wilke"))
# Set colors for conservation states
cur_title = paste("Locus: ", high_locus$original.id, " / Avg. sCF: ", round(high_locus$node.scf.avg,3), " / Method: Species tree / Supported model: ", high_locus$best.fit.model.st, sep="")
xmax = max(nodeHeights(high_st_tree)) + sd(nodeHeights(high_st_tree))
high_st_tree_fig = ggtree(high_st_tree, size=0.8, ladderize=F, aes(color=tree_info$high.state.st)) +
geom_tiplab(color="#333333", size=3.2) +
xlim(0, xmax) +
scale_color_manual(name="Rate states", values=cols) +
#geom_text(aes(x=branch, label=ifelse(tree_info$node.type=="internal" & tree_info$mm=="Y", tree_info$label, '')), size=3, vjust=-0.3, show.legend=F) +
ggtitle(cur_title) +
theme(legend.position="bottom",
plot.margin=unit(c(1,1,1,1), "cm"))
# HIGH SCF ST tree
cur_title = paste("Locus: ", high_locus$original.id, " / Avg. sCF: ", round(high_locus$node.scf.avg,3), " / Method: Gene tree / Supported model: ", high_locus$best.fit.model.gt, sep="")
xmax = max(nodeHeights(high_gt_tree)) + sd(nodeHeights(high_gt_tree))
high_gt_tree_fig = ggtree(high_gt_tree, size=0.8, ladderize=F, aes(color=tree_info$high.state.gt)) +
geom_tiplab(color="#333333", size=3.2) +
xlim(0, xmax) +
scale_color_manual(name="Rate states", values=cols) +
#geom_text(aes(x=branch, label=ifelse(tree_info$node.type=="internal" & tree_info$mm=="Y", tree_info$label, '')), size=3, vjust=-0.3, show.legend=F) +
ggtitle(cur_title) +
theme(legend.position="bottom",
plot.margin=unit(c(1,1,1,1), "cm"))
# HIGH SCF GT tree
cur_title = paste("Locus: ", low_locus$original.id, " Species tree method / Avg. sCF: ", round(low_locus$node.scf.avg,3), " / Method: Species tree / Supported model: ", low_locus$best.fit.model.st, sep="")
xmax = max(nodeHeights(low_st_tree)) + sd(nodeHeights(low_st_tree))
low_st_tree_fig = ggtree(low_st_tree, size=0.8, ladderize=F, aes(color=tree_info$low.state.st)) +
geom_tiplab(color="#333333", size=3.2) +
xlim(0, xmax) +
scale_color_manual(name="Rate states", values=cols) +
#geom_text(aes(x=branch, label=ifelse(tree_info$node.type=="internal" & tree_info$mm=="Y", tree_info$label, '')), size=3, vjust=-0.3, show.legend=F) +
ggtitle(cur_title) +
theme(legend.position="bottom",
plot.margin=unit(c(1,1,1,1), "cm"))
# LOW SCF ST tree
cur_title = paste("Locus: ", low_locus$original.id, " / Avg. sCF: ", round(low_locus$node.scf.avg,3), " / Method: Gene tree / Supported model: ", low_locus$best.fit.model.gt, sep="")
xmax = max(nodeHeights(low_gt_tree)) + sd(nodeHeights(low_gt_tree))
low_gt_tree_fig = ggtree(low_gt_tree, size=0.8, ladderize=F, aes(color=tree_info$low.state.gt)) +
geom_tiplab(color="#333333", size=3.2) +
xlim(0, xmax) +
scale_color_manual(name="Rate states", values=cols) +
#geom_text(aes(x=branch, label=ifelse(tree_info$node.type=="internal" & tree_info$mm=="Y", tree_info$label, '')), size=3, vjust=-0.3, show.legend=F) +
ggtitle(cur_title) +
theme(legend.position="bottom",
plot.margin=unit(c(1,1,1,1), "cm"))
# LOW SCF GT tree
tree_legend = get_legend(high_st_tree_fig)
# Get the legend from one fig
tree_fig_top = plot_grid(high_st_tree_fig + theme(legend.position="none"),
high_gt_tree_fig + theme(legend.position="none"),
low_st_tree_fig + theme(legend.position="none"),
low_gt_tree_fig + theme(legend.position="none"),
ncol=2)
# Combine the M1 locus trees into a single row, removing individual legends
tree_fig = plot_grid(tree_fig_top, tree_legend, nrow=2, rel_heights=c(1,0.1))
# Combine the M1 locus row, M2 locus row, and a single legend
print(tree_fig)
# Display the figure
scf_data = select(aln_stats, locus, node.scf.avg)
names(scf_data)[1] = "original.id"
all_results = merge(st_results, gt_results, by="original.id", suffixes=c(".st", ".gt"))
all_results = merge(all_results, scf_data, by="original.id")
st_results_high = subset(all_results, node.scf.avg > 0.6)
st_results_high = subset(st_results_high, best.fit.model.st == best.fit.model.gt)
st_results_high = subset(st_results_high, best.fit.model.st != "M0" & best.fit.model.gt != "M0")
high_locus = sample_n(st_results_high, 1)
# This randomly selects a locus with high sCF where the best fit models match between
# gene and species tree methods
high_locus = subset(st_results_high, original.id=="chr5-87")
# Select an M1 locus as an example. Other good ones are: chr5-87
high_st_model = tolower(high_locus$best.fit.model.st)
high_gt_model = tolower(high_locus$best.fit.model.gt)
## Selecting locus with high sCF
##########
st_results_low = subset(all_results, node.scf.avg < 0.45)
st_results_low = subset(st_results_low, best.fit.model.st != best.fit.model.gt)
st_results_low = subset(st_results_low, best.fit.model.st != "M0" & best.fit.model.gt != "M0")
low_locus = sample_n(st_results_low, 1)
# This randomly selects a locus with low sCF where the best fit models don't match between
# gene and species tree methods
#low_locus = subset(st_results_low, original.id="chr10-1")
# Select an M1 locus as an example. Other good ones are: chr18-5, chr10-1
low_st_model = tolower(low_locus$best.fit.model.st)
low_gt_model = tolower(low_locus$best.fit.model.gt)
## Selecting locus with LOW sCF
##########
con_high_st = strsplit(high_locus[[paste("conserved.lineages.", high_st_model, ".st" , sep="")]], split=",")[[1]]
acc_high_st = strsplit(high_locus[[paste("accel.lineages.", high_st_model, ".st", sep="")]], split=",")[[1]]
# HIGH SCF ST
con_high_gt = strsplit(high_locus[[paste("conserved.lineages.", high_gt_model, ".gt", sep="")]], split=",")[[1]]
acc_high_gt = strsplit(high_locus[[paste("accel.lineages.", high_gt_model, ".gt", sep="")]], split=",")[[1]]
# HIGH SCF GT
con_low_st = strsplit(low_locus[[paste("conserved.lineages.", low_st_model, ".st" , sep="")]], split=",")[[1]]
acc_low_st = strsplit(low_locus[[paste("accel.lineages.", low_st_model, ".st" , sep="")]], split=",")[[1]]
# LOW SCF ST
con_low_gt = strsplit(low_locus[[paste("conserved.lineages.", low_gt_model, ".gt", sep="")]], split=",")[[1]]
acc_low_gt = strsplit(low_locus[[paste("accel.lineages.", low_gt_model, ".gt", sep="")]], split=",")[[1]]
# LOW SCF GT
## Split the lineages in each state for both M1 and M2 into vectors
##########
tree_info$high.state.st = "background"
tree_info[tree_info$label %in% acc_high_st,]$high.state.st = "accelerated"
tree_info[tree_info$label %in% con_high_st,]$high.state.st = "conserved"
# HIGH SCF ST
tree_info$high.state.gt = "background"
tree_info[tree_info$label %in% acc_high_gt,]$high.state.gt = "accelerated"
tree_info[tree_info$label %in% con_high_gt,]$high.state.gt = "conserved"
# HIGH SCF GT
tree_info$low.state.st = "background"
tree_info[tree_info$label %in% acc_low_st,]$low.state.st = "accelerated"
tree_info[tree_info$label %in% con_low_st,]$low.state.st = "conserved"
# LOW SCF ST
tree_info$low.state.gt = "background"
tree_info[tree_info$label %in% acc_low_gt,]$low.state.gt = "accelerated"
tree_info[tree_info$label %in% con_low_gt,]$low.state.gt = "conserved"
# LOW SCF GT
# Label each branch in the tree as background, accelerated, or conserved for the best fitting model
##########
tree_info$high.bl.st = tree_info$branch.length
tree_info[tree_info$label %in% con_high_st,]$high.bl.st = tree_info[tree_info$label %in% con_high_st,]$high.bl.st * high_locus[[paste("conserved.rate.", low_st_model, ".st" , sep="")]]
tree_info[tree_info$label %in% acc_high_st,]$high.bl.st = tree_info[tree_info$label %in% acc_high_st,]$high.bl.st * high_locus[[paste("accel.rate.", low_st_model, ".st" , sep="")]]
# HIGH SCF ST
tree_info$high.bl.gt = tree_info$branch.length
tree_info[tree_info$label %in% con_high_gt,]$high.bl.gt = tree_info[tree_info$label %in% con_high_gt,]$high.bl.gt * high_locus[[paste("conserved.rate.", low_st_model, ".gt" , sep="")]]
tree_info[tree_info$label %in% acc_high_gt,]$high.bl.gt = tree_info[tree_info$label %in% acc_high_gt,]$high.bl.gt * high_locus[[paste("accel.rate.", low_st_model, ".gt" , sep="")]]
# HIGH SCF GT
tree_info$low.bl.st = tree_info$branch.length
tree_info[tree_info$label %in% con_low_st,]$low.bl.st = tree_info[tree_info$label %in% con_low_st,]$low.bl.st * low_locus[[paste("conserved.rate.", low_st_model, ".st" , sep="")]]
tree_info[tree_info$label %in% acc_low_st,]$low.bl.st = tree_info[tree_info$label %in% acc_low_st,]$low.bl.st * low_locus[[paste("accel.rate.", low_st_model, ".st" , sep="")]]
# LOW SCF ST
tree_info$low.bl.gt = tree_info$branch.length
tree_info[tree_info$label %in% con_low_gt,]$low.bl.gt = tree_info[tree_info$label %in% con_low_gt,]$low.bl.gt * low_locus[[paste("conserved.rate.", low_st_model, ".gt" , sep="")]]
tree_info[tree_info$label %in% acc_low_gt,]$low.bl.gt = tree_info[tree_info$label %in% acc_low_gt,]$low.bl.gt * low_locus[[paste("accel.rate.", low_st_model, ".gt" , sep="")]]
# LOW SCF GT
# M1 LOCUS:  Adjust branch lengths based on the substitution rates in the best fitting model
##########
high_st_tree = tree
high_gt_tree = tree
low_st_tree = tree
low_gt_tree = tree
for(i in 1:length(tree$edge.length)){
cur_len = tree$edge.length[i]
cur_len = format(round(cur_len, 8), nsmall=8)
# Get the original length for this branch and convert it to a rounded string
if(!tree_info[format(round(tree_info$branch.length,8), nsmall=8)==cur_len,]$high.state.st == "background"){
high_st_tree$edge.length[i] = tree_info[format(round(tree_info$branch.length,8), nsmall=8)==cur_len,]$high.bl.st
}
# HIGH SCF ST
if(!tree_info[format(round(tree_info$branch.length,8), nsmall=8)==cur_len,]$high.state.gt == "background"){
high_gt_tree$edge.length[i] = tree_info[format(round(tree_info$branch.length,8), nsmall=8)==cur_len,]$high.bl.gt
}
# HIGH SCF GT
if(!tree_info[format(round(tree_info$branch.length,8), nsmall=8)==cur_len,]$low.state.st == "background"){
low_st_tree$edge.length[i] = tree_info[format(round(tree_info$branch.length,8), nsmall=8)==cur_len,]$low.bl.st
}
# LOW SCF ST
if(!tree_info[format(round(tree_info$branch.length,8), nsmall=8)==cur_len,]$low.state.gt == "background"){
low_gt_tree$edge.length[i] = tree_info[format(round(tree_info$branch.length,8), nsmall=8)==cur_len,]$low.bl.gt
}
# LOW SCF GT
}
# Loop over every branch in the tree and adjust the branch length based on the state in the model
####################
cols = c("background"="#666666", "conserved"=corecol(numcol=1, pal="wilke", offset=1), "accelerated"=corecol(numcol=1, pal="wilke"))
# Set colors for conservation states
cur_title = paste("Locus: ", high_locus$original.id, " / Avg. sCF: ", round(high_locus$node.scf.avg,3), "\nMethod: Species tree / Supported model: ", high_locus$best.fit.model.st, sep="")
xmax = max(nodeHeights(high_st_tree)) + sd(nodeHeights(high_st_tree))
high_st_tree_fig = ggtree(high_st_tree, size=0.8, ladderize=F, aes(color=tree_info$high.state.st)) +
geom_tiplab(color="#333333", size=3.2) +
xlim(0, xmax) +
scale_color_manual(name="Rate states", values=cols) +
#geom_text(aes(x=branch, label=ifelse(tree_info$node.type=="internal" & tree_info$mm=="Y", tree_info$label, '')), size=3, vjust=-0.3, show.legend=F) +
ggtitle(cur_title) +
theme(legend.position="bottom",
plot.margin=unit(c(1,1,1,1), "cm"))
# HIGH SCF ST tree
cur_title = paste("Locus: ", high_locus$original.id, " / Avg. sCF: ", round(high_locus$node.scf.avg,3), "\nMethod: Gene tree / Supported model: ", high_locus$best.fit.model.gt, sep="")
xmax = max(nodeHeights(high_gt_tree)) + sd(nodeHeights(high_gt_tree))
high_gt_tree_fig = ggtree(high_gt_tree, size=0.8, ladderize=F, aes(color=tree_info$high.state.gt)) +
geom_tiplab(color="#333333", size=3.2) +
xlim(0, xmax) +
scale_color_manual(name="Rate states", values=cols) +
#geom_text(aes(x=branch, label=ifelse(tree_info$node.type=="internal" & tree_info$mm=="Y", tree_info$label, '')), size=3, vjust=-0.3, show.legend=F) +
ggtitle(cur_title) +
theme(legend.position="bottom",
plot.margin=unit(c(1,1,1,1), "cm"))
# HIGH SCF GT tree
cur_title = paste("Locus: ", low_locus$original.id, " Species tree method / Avg. sCF: ", round(low_locus$node.scf.avg,3), "\nMethod: Species tree / Supported model: ", low_locus$best.fit.model.st, sep="")
xmax = max(nodeHeights(low_st_tree)) + sd(nodeHeights(low_st_tree))
low_st_tree_fig = ggtree(low_st_tree, size=0.8, ladderize=F, aes(color=tree_info$low.state.st)) +
geom_tiplab(color="#333333", size=3.2) +
xlim(0, xmax) +
scale_color_manual(name="Rate states", values=cols) +
#geom_text(aes(x=branch, label=ifelse(tree_info$node.type=="internal" & tree_info$mm=="Y", tree_info$label, '')), size=3, vjust=-0.3, show.legend=F) +
ggtitle(cur_title) +
theme(legend.position="bottom",
plot.margin=unit(c(1,1,1,1), "cm"))
# LOW SCF ST tree
cur_title = paste("Locus: ", low_locus$original.id, " / Avg. sCF: ", round(low_locus$node.scf.avg,3), "\nMethod: Gene tree / Supported model: ", low_locus$best.fit.model.gt, sep="")
xmax = max(nodeHeights(low_gt_tree)) + sd(nodeHeights(low_gt_tree))
low_gt_tree_fig = ggtree(low_gt_tree, size=0.8, ladderize=F, aes(color=tree_info$low.state.gt)) +
geom_tiplab(color="#333333", size=3.2) +
xlim(0, xmax) +
scale_color_manual(name="Rate states", values=cols) +
#geom_text(aes(x=branch, label=ifelse(tree_info$node.type=="internal" & tree_info$mm=="Y", tree_info$label, '')), size=3, vjust=-0.3, show.legend=F) +
ggtitle(cur_title) +
theme(legend.position="bottom",
plot.margin=unit(c(1,1,1,1), "cm"))
# LOW SCF GT tree
tree_legend = get_legend(high_st_tree_fig)
# Get the legend from one fig
tree_fig_top = plot_grid(high_st_tree_fig + theme(legend.position="none"),
high_gt_tree_fig + theme(legend.position="none"),
low_st_tree_fig + theme(legend.position="none"),
low_gt_tree_fig + theme(legend.position="none"),
ncol=2)
# Combine the M1 locus trees into a single row, removing individual legends
tree_fig = plot_grid(tree_fig_top, tree_legend, nrow=2, rel_heights=c(1,0.1))
# Combine the M1 locus row, M2 locus row, and a single legend
print(tree_fig)
# Display the figure
mm_anc_branches = c("turTru2-orcOrc1", "odoRosDiv1-lepWed1", "triMan1")
# A list of ancestral marine mammal lineages
st_results_m1_m2 = subset(st_results, best.fit.model=="M1" | best.fit.model=="M2")
# Select only loci in which these lineages can be accelerated
st_results_mm_anc = data.frame()
for(i in 1:nrow(st_results_m1_m2)){
cur_model = tolower(st_results_m1_m2[i,]$best.fit.model)
accel_lineages = st_results_m1_m2[i,][[paste("accel.lineages.", cur_model, sep="")]]
accel_lineages = strsplit(accel_lineages, split=",")[[1]]
# Get the accelerated branches from the current locus
accel_anc_lineages = intersect(accel_lineages, mm_anc_branches)
# Get a list of ancestral marine mammal branches that are accelerated in the current locus
if(setequal(accel_anc_lineages, mm_anc_branches)){
# Check if the current accelerated ancestral marine mammal branches match the full
# set of ancestral marine mammal branches
if(all(accel_lineages %in% mm_branches)){
# Check if all the accelerated lineages in the current locus are marine mammal lineages
st_results_mm_anc = rbind(st_results_mm_anc, st_results_m1_m2[i,])
# Add this locus to the data frame of ancestrally accelerated marine mammal lineages
}
}
}
# Count the number of times all three branches are accelerated and no non-marine mammal
# lineages are accelerated
st_results_mm_anc %>% kable() %>% kable_styling(bootstrap_options=c("striped", "condended", "responsive"), full_width=F)
# Display a table with the uniquely accelerated ancestral marine mammal loci
echo_anc_branches = c("turTru2-orcOrc1", "myoDav1-myoLuc2")
# A list of ancestral echolocating lineages
st_results_m1_m2 = subset(st_results, best.fit.model=="M1" | best.fit.model=="M2")
# Select only loci in which these lineages can be accelerated
st_results_echo_anc = data.frame()
for(i in 1:nrow(st_results_m1_m2)){
cur_model = tolower(st_results_m1_m2[i,]$best.fit.model)
accel_lineages = st_results_m1_m2[i,][[paste("accel.lineages.", cur_model, sep="")]]
accel_lineages = strsplit(accel_lineages, split=",")[[1]]
# Get the accelerated branches from the current locus
accel_anc_lineages = intersect(accel_lineages, echo_anc_branches)
# Get a list of ancestral echolocating branches that are accelerated in the current locus
if(setequal(accel_anc_lineages, echo_anc_branches)){
# Check if the current accelerated ancestral echolocating branches match the full
# set of ancestral mecholocating branches
if(all(accel_lineages %in% echo_branches)){
# Check if all the accelerated lineages in the current locus are echolocating lineages
st_results_echo_anc = rbind(st_results_echo_anc, st_results_m1_m2[i,])
# Add this locus to the data frame of ancestrally accelerated echolocating lineages
}
}
}
# Count the number of times all three branches are accelerated and no non-echolocating
# lineages are accelerated
st_results_echo_anc %>% kable() %>% kable_styling(bootstrap_options=c("striped", "condended", "responsive"), full_width=F)
# Display a table with the uniquely accelerated ancestral marine mammal loci
library(data.table)
?fread
source("C:/bin/murine-discordance/data/02-Genomic-discordance/scripts/fig2.r")
source("C:/bin/murine-discordance/data/02-Genomic-discordance/scripts/fig2.r")
here()
detach("package:here", unload = TRUE)
source("C:/bin/murine-discordance/data/02-Genomic-discordance/scripts/fig2.r")
detach("package:here", unload = TRUE)
source("C:/bin/murine-discordance/data/02-Genomic-discordance/scripts/fig2.r")
C:/bin/murine-discordance/data/02-Genomic-discordance/scripts/fig2.r
source("C:/bin/murine-discordance/data/02-Genomic-discordance/scripts/fig2.r")
detach("package:here", unload = TRUE)
source("C:/bin/murine-discordance/data/02-Genomic-discordance/scripts/fig2.r")
?gzfile
source("C:/bin/murine-discordance/data/02-Genomic-discordance/scripts/fig2.r")
source("C:/bin/murine-discordance/data/02-Genomic-discordance/scripts/fig2.r")
source("C:/bin/murine-discordance/data/02-Genomic-discordance/scripts/fig2.r")
source("C:/bin/murine-discordance/data/02-Genomic-discordance/scripts/fig2.r")
source("C:/bin/murine-discordance/data/02-Genomic-discordance/scripts/fig2.r")
source("C:/bin/murine-discordance/data/02-Genomic-discordance/scripts/fig2.r")
nrow(windows)
nrow(all_windows)
source("C:/bin/murine-discordance/data/02-Genomic-discordance/scripts/fig2.r")
str(all_windows)
names(all_windows)
chrdata
str(all_windows$chr)
chrome_to_plot
source("C:/bin/murine-discordance/data/02-Genomic-discordance/scripts/fig2.r")
source("C:/bin/murine-discordance/data/02-Genomic-discordance/scripts/fig2.r")
source("C:/bin/murine-discordance/data/02-Genomic-discordance/scripts/fig2.r")
cat(as.character(Sys.time()), " | Fig2: Saving figure:", fig_file, "\n")
ggsave(filename=fig_file, fig2, width=7.5, height=10, units="in")
?untar
??archive_read
library(archive)
install.packages("archive")
?archive_read
library(archive)
?archive_read
source("C:/bin/murine-discordance/data/02-Genomic-discordance/scripts/fig3.r")
source("C:/bin/murine-discordance/data/02-Genomic-discordance/scripts/fig3.r")
source("C:/bin/murine-discordance/data/02-Genomic-discordance/scripts/fig3.r")
source("C:/bin/murine-discordance/data/02-Genomic-discordance/scripts/fig3.r")
source("C:/bin/murine-discordance/data/02-Genomic-discordance/scripts/fig3.r")
source("C:/bin/murine-discordance/data/02-Genomic-discordance/scripts/fig3.r")
source("C:/bin/murine-discordance/data/02-Genomic-discordance/scripts/fig3.r")
library(readr)
?cols
source("C:/bin/murine-discordance/data/02-Genomic-discordance/scripts/fig3.r")
#random_data = read.csv(random_file, header=T)
random_data = read.csv(archive_read(dist_archive, file=random_file))
nrow(random_data)
dist_archive
random_file
random_file = "test/random-dists"
if(au_flag){
random_file = paste(random_file, "-au", sep="")
}
random_file = paste(random_file, ".csv", sep="")
cat(as.character(Sys.time()), " | Reading random tree dists: ", random_file, "\n")
#random_data = read.csv(random_file, header=T)
random_data = read.csv(archive_read(dist_archive, file=random_file))
nrow(random_data)
random_data$names
str(random_data)
names(random_data)
source("C:/bin/murine-discordance/data/02-Genomic-discordance/scripts/fig4.r")
source("C:/bin/murine-discordance/data/02-Genomic-discordance/scripts/fig4.r")
source("C:/bin/murine-discordance/data/02-Genomic-discordance/scripts/fig4.r")
source("C:/bin/murine-discordance/data/02-Genomic-discordance/scripts/fig4.r")
source("C:/bin/murine-discordance/data/02-Genomic-discordance/scripts/figS_chromoplots.r")
